Top level commands

version ‘3’: This denotes that we are using version 3 of Docker Compose, and Docker will provide the appropriate features. At the time of writing this article, version 3.7 is latest version of Compose.

services: This section defines all the different containers we will create. In our example, we have two services, web and database.

web: This is the name of our Flask app service. Docker Compose will create containers with the name we provide.

build: This specifies the location of our Dockerfile, and . represents the directory where the docker-compose.yml file is located.

ports: This is used to map the container’s ports to the host machine.

volumes: This is just like the -v option for mounting disks in Docker. In this example, we attach our code files directory to the containers’ ./code directory. This way, we won’t have to rebuild the images if changes are made.

links: This will link one service to another. For the bridge network, we must specify which container should be accessible to which container using links.

image: If we don’t have a Dockerfile and want to run a service using a pre-built image, we specify the image location using the image clause. Compose will fork a container from that image.

environment: The clause allows us to set up an environment variable in the container. This is the same as the -e argument in Docker when running a container.




version ‘3’: 
===============

This denotes that we are using version 3 of Docker Compose, and Docker will provide the appropriate features. At the time of writing this article, version 3.7 is latest version of Compose.

services: 
============

This section defines all the different containers we will create. In our example, we have two services, web and database.

web: 
========

This is the name of our Flask app service. Docker Compose will create containers with the name we provide.

build: 
=========

This specifies the location of our Dockerfile, and . represents the directory where the docker-compose.yml file is located.

build can be specified either as a string containing a path to the build context:

build: ./dir

build:
      context: ./dir
      dockerfile: Dockerfile-alternate
      args:
        buildno: 1


context
========
Either a path to a directory containing a Dockerfile, or a url to a git repository.

build:
  context: ./dir


build:
  context: .
  dockerfile: Dockerfile-alternate


args
======
Add build arguments, which are environment variables accessible only during the build process.

ARG buildno
ARG gitcommithash

RUN echo "Build number: $buildno"
RUN echo "Based on commit: $gitcommithash"

build:
  context: .
  args:
    buildno: 1
    gitcommithash: cdc3b19

build:
  context: .
  args:
    - buildno=1
    - gitcommithash=cdc3b19


cache_from
==========

A list of images that the engine uses for cache resolution.

build:
  context: .
  cache_from:
    - alpine:latest
    - corp/web_app:3.14


labels
=======

Add metadata to the resulting image using Docker labels. 

build:
  context: .
  labels:
    com.example.description: "Accounting webapp"
    com.example.department: "Finance"
    com.example.label-with-empty-value: ""


build:
  context: .
  labels:
    - "com.example.description=Accounting webapp"
    - "com.example.department=Finance"
    - "com.example.label-with-empty-value"

version: "3.9"
services:
  web:
    image: web
    deploy:
      labels:
        com.example.description: "This label will appear on the web service"

network
=======

Set the network containers connect to for the RUN instructions during build.

build:
  context: .
  network: host

build:
  context: .
  network: custom_network_1

build:
  context: .
  network: none


shm_size
=========

Set the size of the /dev/shm partition for this build’s containers. Specify as an integer value representing the number of bytes or as a string expressing a byte value.

build:
  context: .
  shm_size: '2gb'

build:
  context: .
  shm_size: 10000000

target
=======

Build the specified stage as defined inside the Dockerfile. See the multi-stage build docs for details.

build:
  context: .
  target: prod


cap_add, cap_drop
==================


Add or drop container capabilities.

cap_add:
  - ALL

cap_drop:
  - NET_ADMIN
  - SYS_ADMIN


cgroup_parent
=============

Specify an optional parent cgroup for the container.

cgroup_parent: m-executor-abcd


command
=======

Override the default command.

command: bundle exec thin -p 3000

command: ["bundle", "exec", "thin", "-p", "3000"]


configs
=======

Grant access to configs on a per-service basis using the per-service configs configuration. 

version: "3.9"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    configs:
      - my_config
      - my_other_config
configs:
  my_config:
    file: ./my_config.txt
  my_other_config:
    external: true


version: "3.9"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    configs:
      - source: my_config
        target: /redis_config
        uid: '103'
        gid: '103'
        mode: 0440
configs:
  my_config:
    file: ./my_config.txt
  my_other_config:
    external: true


container_name
==============


Specify a custom container name, rather than a generated default name.


container_name: my-web-container


credential_spec
===============

Configure the credential spec for managed service account. 

credential_spec:
  file: my-credential-spec.json



depends_on
===========

Express dependency between services. Service dependencies cause the following behaviors:


version: "3.9"
services:
  web:
    build: .
    depends_on:
      - db
      - redis
  redis:
    image: redis
  db:
    image: postgres


deploy
======

Specify configuration related to the deployment and running of services.

version: "3.9"
services:
  redis:
    image: redis:alpine
    deploy:
      replicas: 6
      placement:
        max_replicas_per_node: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure


endpoint_mode
=============

Specify a service discovery method for external clients connecting to a swarm.

endpoint_mode: vip - Docker assigns the service a virtual IP (VIP) that acts as the front end for clients to reach the service on a network. Docker routes requests between the client and available worker nodes for the service, without client knowledge of how many nodes are participating in the service or their IP addresses or ports. (This is the default.)

endpoint_mode: dnsrr - DNS round-robin (DNSRR) service discovery does not use a single virtual IP. Docker sets up DNS entries for the service such that a DNS query for the service name returns a list of IP addresses, and the client connects directly to one of these. DNS round-robin is useful in cases where you want to use your own load balancer, or for Hybrid Windows and Linux applications.

version: "3.9"

services:
  wordpress:
    image: wordpress
    ports:
      - "8080:80"
    networks:
      - overlay
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: vip

  mysql:
    image: mysql
    volumes:
       - db-data:/var/lib/mysql/data
    networks:
       - overlay
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr

volumes:
  db-data:

networks:
  overlay:


mode
====

Either global (exactly one container per swarm node) or replicated (a specified number of containers). The default is replicated. 

version: "3.9"
services:
  worker:
    image: dockersamples/examplevotingapp_worker
    deploy:
      mode: global



placement
==========

Specify placement of constraints and preferences.

version: "3.9"
services:
  db:
    image: postgres
    deploy:
      placement:
        constraints:
          - "node.role==manager"
          - "engine.labels.operatingsystem==ubuntu 18.04"
        preferences:
          - spread: node.labels.zone


max_replicas_per_node
=====================

If the service is replicated (which is the default), limit the number of replicas that can run on a node at any time.

When there are more tasks requested than running nodes, an error no suitable node (max replicas per node limit exceed) is raised.


version: "3.9"
services:
  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 6
      placement:
        max_replicas_per_node: 1


replicas
========
If the service is replicated (which is the default), specify the number of containers that should be running at any given time.

version: "3.9"
services:
  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 6


resources
===========

Configures resource constraints.

version: "3.9"
services:
  redis:
    image: redis:alpine
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 20M



restart_policy
==============


Configures if and how to restart containers when they exit. Replaces restart.

version: "3.9"
services:
  redis:
    image: redis:alpine
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s


rollback_config
===============

Configures how the service should be rollbacked in case of a failing update.

update_config
=============

Configures how the service should be updated. Useful for configuring rolling updates.

version: "3.9"
services:
  vote:
    image: dockersamples/examplevotingapp_vote:before
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first



entrypoint
================


Override the default entrypoint.

entrypoint: /code/entrypoint.sh

entrypoint: ["php", "-d", "memory_limit=-1", "vendor/bin/phpunit"]



env_file
=========

Add environment variables from a file. Can be a single value or a list.

If you have specified a Compose file with docker-compose -f FILE, paths in env_file are relative to the directory that file is in.

Environment variables declared in the environment section override these values – this holds true even if those values are empty or undefined.

env_file: .env

env_file:
  - ./common.env
  - ./apps/web.env
  - /opt/runtime_opts.env



environment
===========

Add environment variables. You can use either an array or a dictionary. Any boolean values (true, false, yes, no) need to be enclosed in quotes to ensure they are not converted to True or False by the YML parser.

Environment variables with only a key are resolved to their values on the machine Compose is running on, which can be helpful for secret or host-specific values.

The clause allows us to set up an environment variable in the container. This is the same as the -e argument in Docker when running a container.

environment:
  RACK_ENV: development
  SHOW: 'true'
  SESSION_SECRET:


environment:
  - RACK_ENV=development
  - SHOW=true
  - SESSION_SECRET



expose
======

Expose ports without publishing them to the host machine - they’ll only be accessible to linked services. Only the internal port can be specified.

expose:
  - "3000"
  - "8000"


external_links
===============


Link to containers started outside this docker-compose.yml or even outside of Compose, especially for containers that provide shared or common services. external_links follow semantics similar to the legacy option links when specifying both the container name and the link alias (CONTAINER:ALIAS).

external_links:
  - redis_1
  - project_db_1:mysql
  - project_db_1:postgresql


extra_hosts
============
Add hostname mappings. Use the same values as the docker client --add-host parameter.

extra_hosts:
  - "somehost:162.242.195.82"
  - "otherhost:50.31.209.229"



healthcheck
==============


Configure a check that’s run to determine whether or not containers for this service are “healthy”. 

healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost"]
  interval: 1m30s
  timeout: 10s
  retries: 3
  start_period: 40s


healthcheck:
  disable: true


image
=====

Specify the image to start the container from. Can either be a repository/tag or a partial image ID.

image: ubuntu:18.04
image: tutum/influxdb
image: example-registry.com:4000/postgresql
image: a4bc65fd

If we don’t have a Dockerfile and want to run a service using a pre-built image, we specify the image location using the image clause. Compose will fork a container from that image.


init
=====
Run an init inside the container that forwards signals and reaps processes. Set this option to true to enable this feature for the service.

version: "3.9"
services:
  web:
    image: alpine:latest
    init: true


links
=====

Link to containers in another service. Either specify both the service name and a link alias ("SERVICE:ALIAS"), or just the service name.


This will link one service to another. For the bridge network, we must specify which container should be accessible to which container using links.


web:
  links:
    - "db"
    - "db:database"
    - "redis"


logging
========

Logging configuration for the service.
	

logging:
  driver: syslog
  options:
    syslog-address: "tcp://192.168.0.42:123"

driver: "json-file"
driver: "syslog"
driver: "none"

driver: "syslog"
options:
  syslog-address: "tcp://192.168.0.42:123"
  max-size: "200k"
  max-file: "10"


version: "3.9"
services:
  some-service:
    image: some-service
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
	

network_mode
=============

Network mode. Use the same values as the docker client --network parameter, plus the special form service:[service name].

network_mode: "bridge"
network_mode: "host"
network_mode: "none"
network_mode: "service:[service name]"
network_mode: "container:[container name/id]"


networks
=========
Networks to join, referencing entries under the top-level networks key.


services:
  some-service:
    networks:
     - some-network
     - other-network


version: "3.9"

services:
  web:
    image: "nginx:alpine"
    networks:
      - new

  worker:
    image: "my-worker-image:latest"
    networks:
      - legacy

  db:
    image: mysql
    networks:
      new:
        aliases:
          - database
      legacy:
        aliases:
          - mysql

networks:
  new:
  legacy:


version: "3.9"

services:
  app:
    image: nginx:alpine
    networks:
      app_net:
        ipv4_address: 172.16.238.10
        ipv6_address: 2001:3984:3989::10

networks:
  app_net:
    ipam:
      driver: default
      config:
        - subnet: "172.16.238.0/24"
        - subnet: "2001:3984:3989::/64"


pid
======

pid: "host"

Sets the PID mode to the host PID mode. This turns on sharing between container and the host operating system the PID address space. Containers launched with this flag can access and manipulate other containers in the bare-metal machine’s namespace and vice versa.

5. ports: 
=========


This is used to map the container’s ports to the host machine.

ports:
  - "3000"
  - "3000-3005"
  - "8000:8000"
  - "9090-9091:8080-8081"
  - "49100:22"
  - "127.0.0.1:8001:8001"
  - "127.0.0.1:5000-5010:5000-5010"
  - "127.0.0.1::5000"
  - "6060:6060/udp"
  - "12400-12500:1240"

ports:
  - target: 80
    published: 8080
    protocol: tcp
    mode: host



profiles
========

profiles defines a list of named profiles for the service to be enabled under. When not set, the service is always enabled. For the services that make up your core application you should omit profiles so they will always be started.

Valid profile names follow the regex format [a-zA-Z0-9][a-zA-Z0-9_.-]+.

profiles: ["frontend", "debug"]
profiles:
  - frontend
  - debug


restart
========

no is the default restart policy, and it does not restart a container under any circumstance. When always is specified, the container always restarts. The on-failure policy restarts a container if the exit code indicates an on-failure error. unless-stopped always restarts a container, except when the container is stopped (manually or otherwise).


restart: "no"
restart: always
restart: on-failure
restart: unless-stopped



secrets
=======
Grant access to secrets on a per-service basis using the per-service secrets configuration. Two different syntax variants are supported.

version: "3.9"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    secrets:
      - my_secret
      - my_other_secret
secrets:
  my_secret:
    file: ./my_secret.txt
  my_other_secret:
    external: true

version: "3.9"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    secrets:
      - source: my_secret
        target: redis_secret
        uid: '103'
        gid: '103'
        mode: 0440
secrets:
  my_secret:
    file: ./my_secret.txt
  my_other_secret:
    external: true


security_opt
============

Override the default labeling scheme for each container.

security_opt:
  - label:user:USER
  - label:role:ROLE


stop_grace_period
=================
Specify how long to wait when attempting to stop a container if it doesn’t handle SIGTERM (or whatever stop signal has been specified with stop_signal), before sending SIGKILL. Specified as a duration.


stop_grace_period: 1s
stop_grace_period: 1m30s

By default, stop waits 10 seconds for the container to exit before sending SIGKILL.

stop_signal
============
Sets an alternative signal to stop the container. By default stop uses SIGTERM. Setting an alternative signal using stop_signal causes stop to send that signal instead.


stop_signal: SIGUSR1

sysctls
========
Kernel parameters to set in the container. You can use either an array or a dictionary.


sysctls:
  net.core.somaxconn: 1024
  net.ipv4.tcp_syncookies: 0

sysctls:
  - net.core.somaxconn=1024
  - net.ipv4.tcp_syncookies=0




tmpfs
======

Mount a temporary file system inside the container. Can be a single value or a list.


tmpfs: /run

tmpfs:
  - /run
  - /tmp

- type: tmpfs
  target: /app
  tmpfs:
    size: 1000


ulimits
=========
Override the default ulimits for a container. You can either specify a single limit as an integer or soft/hard limits as a mapping.


ulimits:
  nproc: 65535
  nofile:
    soft: 20000
    hard: 40000


userns_mode
=============
userns_mode: "host"

Disables the user namespace for this service, if Docker daemon is configured with user namespaces.






6. volumes: 
============


This is just like the -v option for mounting disks in Docker. In this example, we attach our code files directory to the containers’ ./code directory. This way, we won’t have to rebuild the images if changes are made.

Mount host paths or named volumes, specified as sub-options to a service.

You can mount a host path as part of a definition for a single service, and there is no need to define it in the top level volumes key.

But, if you want to reuse a volume across multiple services, then define a named volume in the top-level volumes key. Use named volumes with services, swarms, and stack files.

version: "3.9"
services:
  web:
    image: nginx:alpine
    volumes:
      - type: volume
        source: mydata
        target: /data
        volume:
          nocopy: true
      - type: bind
        source: ./static
        target: /opt/app/static

  db:
    image: postgres:latest
    volumes:
      - "/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock"
      - "dbdata:/var/lib/postgresql/data"

volumes:
  mydata:
  dbdata:


volumes:
  # Just specify a path and let the Engine create a volume
  - /var/lib/mysql

  # Specify an absolute path mapping
  - /opt/data:/var/lib/mysql

  # Path on the host, relative to the Compose file
  - ./cache:/tmp/cache

  # User-relative path
  - ~/configs:/etc/configs/:ro

  # Named volume
  - datavolume:/var/lib/mysql


version: "3.9"

services:
  db:
    image: db
    volumes:
      - data-volume:/var/lib/db
  backup:
    image: backup-service
    volumes:
      - data-volume:/var/lib/backup/data

volumes:
  data-volume:




